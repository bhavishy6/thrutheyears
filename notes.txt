notes

Chapter 1:



spans: doc[2:5]
-----> returns tokens 2,3,4




Syntax prediction
for token in doc:
    print(token.text, token.pos_, token.dep_, token.head.text)

She PRON nsubj ate
ate VERB ROOT ate
the DET det pizza
pizza NOUN dobj ate




Real world Objects ie Entities:
doc = nlp(u"Apple is looking at buying U.K. startup for $1 billion")

for ent in doc.ents:
    print(ent.text, ent.label_)

>>>>>
Apple ORG
U.K. GPE
$1 billion MONEY




spacy.explain(): <<use print()>>
spacy.explain('GPE')

'Countries, cities, states'

spacy.explain('NNP')

'noun, proper singular'

spacy.explain('dobj')
'direct object'




operators and quantifiers
{'OP': '!'} 	Negation: match 0 times
{'OP': '?'} 	Optional: match 0 or 1 times
{'OP': '+'} 	Match 1 or more times
{'OP': '*'} 	Match 0 or more times

chatper 2:
comparing similaritys:
- spans, docs, tokens
span.similarity(span2)... etc. 


Chapter 3
Passing in Contexts

data = [
    ('This is a text', {'id': 1, 'page_number': 15}),
    ('And another text', {'id': 2, 'page_number': 16}),
]

for doc, context in nlp.pipe(data, as_tuples=True):
    doc._.id = context['id']
    doc._.page_number = context['page_number']